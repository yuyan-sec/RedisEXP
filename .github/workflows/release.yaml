name: goreleaser

on:
  push:
    tags:
      - '*'  # 触发推送所有 tag

permissions:
  contents: write  # 允许修改 GitHub 内容

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 设置最大超时时间

    steps:
      - name: "Check out code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 检出所有提交

      - name: "Set up Go"
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'

      - name: "Install UPX"
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: "UPX version"
        run: upx --version  # 打印 UPX 版本，确认安装

      - name: "Run GoReleaser"
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: "release --clean -f .github/conf/.goreleaser.yml"  # 使用自定义的 goreleaser 配置文件
          workdir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename and Zip binaries
        run: |
          # 进入构建输出目录
          cd dist || exit 1

          # 使用 find 命令查找所有二进制文件并重命名
          for file in $(find . -type f -name "RedisEXP*"); do
            # 获取平台和架构信息
            os=$(echo $file | sed -E 's/.*_(darwin|linux|freebsd|solaris|windows)_.*/\1/')
            arch=$(echo $file | sed -E 's/.*_(amd64|386|arm64|arm|mips|mipsle|mips64)_.*/\1/')
            
            # 获取文件扩展名
            ext="${file##*.}"
            
            # 获取文件的目录路径
            dir=$(dirname "$file")
            
            # 提取文件名
            filename=$(basename "$file")
            
            # 确保路径名和文件名没有重复部分
            if [[ "$os" == "windows" ]]; then
              new_name="${dir}/RedisEXP_${os}_${arch}.${ext}"
            else
              new_name="${dir}/RedisEXP_${os}_${arch}"
            fi
            
            # 如果原文件名与新文件名相同，跳过重命名
            if [[ "$filename" == "$(basename "$new_name")" ]]; then
              echo "Skipping $file, the file name is already correct."
            else
              # 重命名文件
              echo "Renaming $file to $new_name"
              mv "$file" "$new_name"
            fi
          done

          # 仅选择所有重命名后的二进制文件进行打包，排除目录结构
          echo "Creating all.zip with only renamed binary files"

          # 使用 find 查找重命名后的文件并打包，使用 -j 参数来去除目录结构，同时避免文件名重复
          find . -type f -name "RedisEXP_*" | while read -r file; do
            # 生成唯一的文件名
            base_name=$(basename "$file")
            zip_name="RedisEXP_${base_name}"
            
            # 将文件添加到 zip
            zip -j RedisEXP_All.zip "$file"
          done

          echo "RedisEXP_All.zip created successfully!"

      - name: "List files in dist/"
        run: ls -l dist/  # 确保文件确实存在
        
      - name: "Upload RedisExp_All.zip to GitHub Release"
        uses: softprops/action-gh-release@v1
        with:
          files: dist/RedisEXP_All.zip  # 确保文件名正确，包括大小写
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
